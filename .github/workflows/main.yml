name: Backend CI/CD Pipeline - Build and Push Docker Image

on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 실행
  pull_request:
    branches: [ "main" ] # main 브랜치로 풀 리퀘스트가 생성될 때 실행
  workflow_dispatch: # 수동으로 워크플로우를 실행할 수 있도록 허용

env:
  DOCKER_IMAGE: backend # Docker 이미지 이름 정의
  DOCKER_TAG: 0.1     # Docker 이미지 태그 정의 (초기 버전)

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:11
        env:
          MARIADB_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MARIADB_DATABASE: jlpt_question_db
          MARIADB_USER: ${{ secrets.MYSQL_USER }}
          MARIADB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >
          --health-cmd="mysqladmin ping -h 127.0.0.1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5


    steps:
      # 소스 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4 # GitHub 리포지토리 코드를 워크플로우에 체크아웃

      # gradlew 실행 권한 부여
      # Git은 파일 권한을 항상 유지하지 않을 수 있으므로,
      # gradlew 스크립트가 실행 가능하도록 권한을 명시적으로 부여합니다.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew # gradlew 스크립트에 실행 권한 추가

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3 # Java 개발 환경 설정 액션 사용
        with:
          java-version: '17' # Java 17 버전 사용
          distribution: 'temurin' # Adoptium Temurin 배포판 사용
          cache: gradle # Gradle 캐시 활성화 (빌드 속도 향상)

      # Gradle 캐시 설정
      # Gradle 종속성 캐싱을 통해 빌드 시간을 단축합니다.
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Wait for MariaDB to be ready
        run: sleep 15

      # Gradle 빌드 (테스트 포함)
      # Gradle Wrapper를 사용하여 프로젝트를 빌드하고, 테스트를 포함하여 실행합니다.
      # 'build' 태스크는 기본적으로 'test' 태스크에 의존하므로, -x test 옵션 제거 시 테스트가 실행됩니다.
      - name: Build with Gradle (including tests)
        run: ./gradlew build # Gradle Wrapper를 사용하여 빌드 (테스트 포함)

      # Docker Hub 로그인
      # Docker 이미지를 푸시하기 위해 Docker Hub에 로그인합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v3 # Docker 로그인 액션 사용
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # GitHub Secrets에 저장된 Docker 사용자 이름
          password: ${{ secrets.DOCKER_PASSWORD }} # GitHub Secrets에 저장된 Docker 비밀번호 (토큰)

      # Docker 이미지 빌드 및 푸시
      # 빌드된 애플리케이션을 Docker 이미지로 만들고 Docker Hub에 푸시합니다.
      # 이전 스텝(Build with Gradle)에서 테스트가 실패하면 이 스텝은 실행되지 않습니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5 # Docker 빌드 및 푸시 액션 사용
        with:
          context: . # Dockerfile이 있는 현재 디렉토리를 빌드 컨텍스트로 지정
          file: ./Dockerfile # 사용할 Dockerfile 경로 지정
          push: true # Docker Hub로 이미지 푸시 활성화
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} # 이미지 태그 설정 (사용자명/이미지명:태그)

      # 빌드 결과 출력
      # 이미지가 성공적으로 푸시되었음을 콘솔에 출력합니다.
      - name: Image digest
        run: echo "Image pushed successfully to ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
